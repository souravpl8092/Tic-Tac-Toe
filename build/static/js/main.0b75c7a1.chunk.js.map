{"version":3,"sources":["Square.js","Board.js","helpers.js","Game.js","App.js","index.js"],"names":["style","background","border","fontSize","fontWeight","cursor","outline","Square","onClick","value","borderRadius","width","height","margin","display","gridTemplate","Board","squares","map","square","i","styles","startingBoard","Array","fill","Game","useState","board","setBoard","xIsNext","setXisNext","winner","lines","length","a","b","c","calculateWinner","App","rootElement","document","getElementById","ReactDOM","render"],"mappings":"kJAEMA,EAAQ,CACZC,WAAY,YACZC,OAAQ,qBACRC,SAAU,OACVC,WAAY,MACZC,OAAQ,UACRC,QAAS,QASIC,EANA,SAAH,OAAMC,EAAO,EAAPA,QAASC,EAAK,EAALA,MAAK,OAC9B,wBAAQT,MAAOA,EAAOQ,QAASA,EAAQ,SACpCC,GACM,ECXLT,EAAQ,CACZE,OAAQ,qBACRQ,aAAc,OACdC,MAAO,QACPC,OAAQ,QACRC,OAAQ,SACRC,QAAS,OACTC,aAAc,qCAUDC,EAPD,SAAH,OAAMR,EAAO,EAAPA,QAASS,EAAO,EAAPA,QAAO,OAC/B,qBAAKjB,MAAOA,EAAM,SACfiB,EAAQC,KAAI,SAACC,EAAQC,GAAC,OACrB,cAAC,EAAM,CAASX,MAAOU,EAAQX,QAAS,kBAAMA,EAAQY,EAAE,GAA3CA,EAA+C,KAE1D,ECCR,ICfMC,EAAS,CACbV,MAAO,QACPE,OAAQ,aAGJS,EAAgB,WAAH,OAASC,MAAM,GAAGC,KAAK,KAAM,EAmCjCC,EAlCF,WACX,MAA0BC,mBAASJ,KAAgB,mBAA5CK,EAAK,KAAEC,EAAQ,KACtB,EAA8BF,oBAAS,GAAK,mBAArCG,EAAO,KAAEC,EAAU,KACpBC,EDbD,SAAyBd,GAW9B,IAVA,IAAMe,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAZ,EAAI,EAAGA,EAAIY,EAAMC,OAAQb,IAAK,CACrC,kBAAkBY,EAAMZ,GAAE,GAAnBc,EAAC,KAAEC,EAAC,KAAEC,EAAC,KACd,GAAInB,EAAQiB,IAAMjB,EAAQiB,KAAOjB,EAAQkB,IAAMlB,EAAQiB,KAAOjB,EAAQmB,GACpE,OAAOnB,EAAQiB,EAEnB,CACA,OAAO,IACT,CCLiBG,CAAgBV,GAgB/B,OACE,qCACE,cAAC,EAAK,CAACV,QAASU,EAAOnB,QAhBP,SAACY,GAEfW,GAAUJ,EAAMP,KAEpBO,EAAMP,GAAKS,EAAU,IAAM,IAC3BD,EAASD,GACTG,GAAYD,GACd,IAUI,sBAAK7B,MAAOqB,EAAO,UACjB,4BACGU,EACG,WAAaA,EACb,iBAAmBF,EAAU,IAAM,OAEzC,wBAAQrB,QAAS,kBAbrBoB,EAASN,UACTQ,GAAW,EAYuB,EAAC,SAAC,oBAIxC,ECtCe,SAASQ,IACtB,OACE,mCACE,cAAC,EAAI,KAGX,CCLA,IAAMC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,cAAC,aAAU,UACT,cAACL,EAAG,MAENC,E","file":"static/js/main.0b75c7a1.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst style = {\r\n  background: \"lightblue\",\r\n  border: \"2px solid darkblue\",\r\n  fontSize: \"30px\",\r\n  fontWeight: \"800\",\r\n  cursor: \"pointer\",\r\n  outline: \"none\"\r\n};\r\n\r\nconst Square = ({ onClick, value }) => (\r\n  <button style={style} onClick={onClick}>\r\n    {value}\r\n  </button>\r\n);\r\n\r\nexport default Square;\r\n","import React from \"react\";\r\nimport Square from \"./Square\";\r\n\r\nconst style = {\r\n  border: \"4px solid darkblue\",\r\n  borderRadius: \"10px\",\r\n  width: \"350px\",\r\n  height: \"350px\",\r\n  margin: \"0 auto\",\r\n  display: \"grid\",\r\n  gridTemplate: \"repeat( 3, 1fr) / repeat( 3, 1fr)\"\r\n};\r\n\r\nconst Board = ({ onClick, squares }) => (\r\n  <div style={style}>\r\n    {squares.map((square, i) => (\r\n      <Square key={i} value={square} onClick={() => onClick(i)} />\r\n    ))}\r\n  </div>\r\n);\r\nexport default Board;\r\n","export function calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6]\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  return null;\r\n}\r\nconst squares = [null, null, null, \"X\", \"X\", \"O\", null, null, null];\r\n","import React, { useState } from \"react\";\r\nimport Board from \"./Board\";\r\nimport { calculateWinner } from \"./helpers\";\r\n\r\nconst styles = {\r\n  width: \"200px\",\r\n  margin: \"20px auto\"\r\n};\r\n\r\nconst startingBoard = () => Array(9).fill(null);\r\nconst Game = () => {\r\n  const [board, setBoard] = useState(startingBoard());\r\n  const [xIsNext, setXisNext] = useState(true);\r\n  const winner = calculateWinner(board);\r\n\r\n  const handleClick = (i) => {\r\n    // If user click an occupied square or if game is won, return\r\n    if (winner || board[i]) return;\r\n    // Put X or an O in the clicked square\r\n    board[i] = xIsNext ? \"X\" : \"O\";\r\n    setBoard(board);\r\n    setXisNext(!xIsNext);\r\n  };\r\n\r\n  const reset = () => {\r\n    setBoard(startingBoard());\r\n    setXisNext(true);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Board squares={board} onClick={handleClick} />\r\n      <div style={styles}>\r\n        <p>\r\n          {winner\r\n            ? \"Winner: \" + winner\r\n            : \"Next Player: \" + (xIsNext ? \"X\" : \"O\")}\r\n        </p>\r\n        <button onClick={() => reset()}>START GAME</button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n","import \"./styles.css\";\nimport React from \"react\";\nimport Game from \"./Game\";\n\nexport default function App() {\n  return (\n    <>\n      <Game />\n    </>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}